#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

#include "ReedSolomon.hpp"
#include <format>

using namespace std;

#define rep(i, a, b) for (int i = a; i < (b); ++i)
#define repe(i, a, b) for (int i = a; i <= (b); ++i)
#define rep0(i, n) rep(i, 0, n)
#define rep1(i, n) for (int i = 1; i <= (n); ++i)
#define rer(i, a, b) for (int i = (b) - 1; i >= (a); ++i)
#define rer0(i, n) rer(i, 0, n)
#define each(a, x) for (auto &a : x)
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
#define sz(x) (int)(x).size()

template <class T> using V = vector<T>;
template <class T, size_t SZ> using ARR = array<T, SZ>;

TEST_CASE("jsQR test 104") {
  initGF2E();
  vector<vector<uint8_t>> blocks = {
      {32,  2,   226, 0,   1,  178, 176, 183, 16,  2,   205, 136, 0,   36,
       238, 202, 220, 26,  20, 230, 228, 222, 238, 202, 220, 128, 206, 222,
       222, 206, 216, 202, 64, 6,   164, 0,   5,   99,  111, 109, 13,  10,
       16,  25,  191, 194, 74, 204, 39,  216, 3,   143, 25,  255, 26,  6,
       94,  226, 41,  220, 11, 129, 163, 251, 62,  242, 80,  23,  173},
      {3,   229, 72,  0,   210, 32,  6,   182, 16,  1,   164, 64,  17,  35,
       132, 0,   6,   13,  10,  104, 116, 116, 112, 32,  7,   249, 235, 64,
       0,   118, 23,  118, 87,  54,  246, 214, 82,  0,   52,  160, 0,   67,
       163, 161, 224, 156, 68,  41,  253, 15,  218, 101, 210, 136, 18,  142,
       97,  116, 49,  167, 254, 138, 164, 47,  150, 247, 104, 125, 128},
      {67,  123, 171, 59,  67,  163, 153, 0,   26,  144, 0,   13,  141, 189,
       180, 0,   236, 17,  236, 17,  236, 17,  172, 17,  236, 17,  236, 17,
       236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 243, 139, 54,  101, 81,  99,  136, 157, 59,  241, 96,  183, 44,
       22,  89,  33,  222, 131, 156, 81,  67,  154, 33,  181, 226, 175},
      {17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236,
       17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236,
       17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  204, 17,  236,
       17,  98,  126, 230, 110, 218, 220, 62,  213, 82,  111, 241, 250, 184,
       236, 68,  24,  70,  54,  248, 69,  21,  223, 254, 222, 255, 115},
      {236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17, 6,   92,  222, 156, 198, 177, 9,   148, 181, 242, 235, 118,
       103, 70, 170, 204, 103, 164, 104, 218, 9,   219, 139, 90,  140, 145}};
  vector<int> blockSizes = {43, 43, 43, 43, 44};

  vector<vector<uint8_t>> expected = {
      {32,  2,   226, 0,   1,  178, 176, 183, 16,  2,   205, 136, 0,   36,
       238, 202, 220, 26,  20, 230, 228, 222, 238, 202, 220, 128, 206, 222,
       222, 206, 216, 202, 64, 6,   164, 0,   5,   99,  111, 109, 13,  10,
       16,  25,  191, 194, 74, 204, 39,  216, 3,   143, 25,  255, 26,  6,
       94,  226, 41,  220, 11, 129, 163, 251, 62,  242, 80,  23,  173},
      {3,   229, 72,  0,   210, 32,  6,   182, 16,  1,   164, 64,  17,  35,
       132, 0,   6,   13,  10,  104, 116, 116, 112, 32,  7,   249, 235, 64,
       0,   118, 23,  118, 87,  54,  246, 214, 82,  0,   52,  160, 0,   67,
       163, 161, 224, 156, 68,  41,  253, 15,  218, 101, 210, 136, 18,  142,
       97,  116, 49,  167, 254, 138, 164, 47,  150, 247, 104, 125, 128},
      {67,  123, 171, 59,  67,  163, 153, 0,   26,  144, 0,   13,  141, 189,
       180, 0,   236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 243, 139, 54,  101, 81,  99,  136, 157, 59,  241, 96,  183, 44,
       22,  89,  33,  222, 131, 156, 81,  67,  154, 33,  181, 226, 175},
      {17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236,
       17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236,
       17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236,
       17,  98,  126, 230, 110, 218, 220, 62,  213, 82,  111, 241, 250, 184,
       236, 68,  24,  70,  54,  248, 69,  21,  223, 254, 222, 255, 115},
      {236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17, 6,   92,  222, 156, 198, 177, 9,   148, 181, 242, 235, 118,
       103, 70, 170, 204, 103, 164, 104, 218, 9,   219, 139, 90,  140, 145}};

  rep0(i, sz(blocks)) {
    // decodewasm usually does this
    reverse(blocks[i].begin(), blocks[i].end());
    reverse(expected[i].begin(), expected[i].end());

    DOCTEST_MESSAGE(format("Block {}", i + 1));
    auto res = *decodeBytes(blocks[i], sz(blocks[i]) - blockSizes[i]);
    rep0(j, sz(blocks[i])) {
      DOCTEST_INFO(format("Block {}, byte {}", i + 1, j));
      CHECK(res[j] == expected[i][j]);
    }
  }
}
