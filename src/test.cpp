#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

#include "ReedSolomon.hpp"
#include <format>

using namespace std;

#define rep(i, a, b) for (int i = a; i < (b); ++i)
#define repe(i, a, b) for (int i = a; i <= (b); ++i)
#define rep0(i, n) rep(i, 0, n)
#define rep1(i, n) for (int i = 1; i <= (n); ++i)
#define rer(i, a, b) for (int i = (b) - 1; i >= (a); ++i)
#define rer0(i, n) rer(i, 0, n)
#define each(a, x) for (auto &a : x)
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
#define sz(x) (int)(x).size()
#define debug(x)                                                               \
  cerr << "line " << __LINE__ << ": " << #x << " = " << (x) << endl;
#define debugv(v)                                                              \
  cerr << "line " << __LINE__ << ": " << #v << " = [ ";                        \
  for (auto _i : v)                                                            \
    cerr << _i << ' ';                                                         \
  cerr << ']' << endl;

template <class T> using V = vector<T>;
template <class T, size_t SZ> using ARR = array<T, SZ>;

/* A collection of problematic test cases from jsQR's test suites
 * Should cover the main regressions (fail decode, misdecode)
 * Use fold if the big vectors are annoying
 */
TEST_CASE("jsQR test 104") {
  V<V<uint8_t>> blocks = {
      {32,  2,   226, 0,   1,  178, 176, 183, 16,  2,   205, 136, 0,   36,
       238, 202, 220, 26,  20, 230, 228, 222, 238, 202, 220, 128, 206, 222,
       222, 206, 216, 202, 64, 6,   164, 0,   5,   99,  111, 109, 13,  10,
       16,  25,  191, 194, 74, 204, 39,  216, 3,   143, 25,  255, 26,  6,
       94,  226, 41,  220, 11, 129, 163, 251, 62,  242, 80,  23,  173},
      {3,   229, 72,  0,   210, 32,  6,   182, 16,  1,   164, 64,  17,  35,
       132, 0,   6,   13,  10,  104, 116, 116, 112, 32,  7,   249, 235, 64,
       0,   118, 23,  118, 87,  54,  246, 214, 82,  0,   52,  160, 0,   67,
       163, 161, 224, 156, 68,  41,  253, 15,  218, 101, 210, 136, 18,  142,
       97,  116, 49,  167, 254, 138, 164, 47,  150, 247, 104, 125, 128},
      {67,  123, 171, 59,  67,  163, 153, 0,   26,  144, 0,   13,  141, 189,
       180, 0,   236, 17,  236, 17,  236, 17,  172, 17,  236, 17,  236, 17,
       236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 243, 139, 54,  101, 81,  99,  136, 157, 59,  241, 96,  183, 44,
       22,  89,  33,  222, 131, 156, 81,  67,  154, 33,  181, 226, 175},
      {17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236,
       17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236,
       17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  204, 17,  236,
       17,  98,  126, 230, 110, 218, 220, 62,  213, 82,  111, 241, 250, 184,
       236, 68,  24,  70,  54,  248, 69,  21,  223, 254, 222, 255, 115},
      {236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17, 6,   92,  222, 156, 198, 177, 9,   148, 181, 242, 235, 118,
       103, 70, 170, 204, 103, 164, 104, 218, 9,   219, 139, 90,  140, 145}};
  V<int> dataSizes = {43, 43, 43, 43, 44};

  V<V<uint8_t>> expected = {
      {32,  2,   226, 0,   1,  178, 176, 183, 16,  2,   205, 136, 0,   36,
       238, 202, 220, 26,  20, 230, 228, 222, 238, 202, 220, 128, 206, 222,
       222, 206, 216, 202, 64, 6,   164, 0,   5,   99,  111, 109, 13,  10,
       16,  25,  191, 194, 74, 204, 39,  216, 3,   143, 25,  255, 26,  6,
       94,  226, 41,  220, 11, 129, 163, 251, 62,  242, 80,  23,  173},
      {3,   229, 72,  0,   210, 32,  6,   182, 16,  1,   164, 64,  17,  35,
       132, 0,   6,   13,  10,  104, 116, 116, 112, 32,  7,   249, 235, 64,
       0,   118, 23,  118, 87,  54,  246, 214, 82,  0,   52,  160, 0,   67,
       163, 161, 224, 156, 68,  41,  253, 15,  218, 101, 210, 136, 18,  142,
       97,  116, 49,  167, 254, 138, 164, 47,  150, 247, 104, 125, 128},
      {67,  123, 171, 59,  67,  163, 153, 0,   26,  144, 0,   13,  141, 189,
       180, 0,   236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 243, 139, 54,  101, 81,  99,  136, 157, 59,  241, 96,  183, 44,
       22,  89,  33,  222, 131, 156, 81,  67,  154, 33,  181, 226, 175},
      {17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236,
       17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236,
       17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236,
       17,  98,  126, 230, 110, 218, 220, 62,  213, 82,  111, 241, 250, 184,
       236, 68,  24,  70,  54,  248, 69,  21,  223, 254, 222, 255, 115},
      {236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       236, 17, 6,   92,  222, 156, 198, 177, 9,   148, 181, 242, 235, 118,
       103, 70, 170, 204, 103, 164, 104, 218, 9,   219, 139, 90,  140, 145}};

  rep0(i, sz(blocks)) {
    DOCTEST_INFO(format("Block {}", i + 1));
    int res = decodeBytes(blocks[i], sz(blocks[i]) - dataSizes[i]);
    REQUIRE(res != -1);
    CHECK(sz(blocks[i]) == sz(expected[i]));
    rep0(j, sz(blocks[i])) {
      DOCTEST_INFO(format("Block {}, byte {}", i + 1, j));
      CHECK(blocks[i][j] == expected[i][j]);
    }
  }
}

TEST_CASE("jsQR test 96 - location 1") {
  V<V<uint8_t>> blocks = {{133, 228, 78,  113, 85, 135, 202, 115,
                           180, 125, 228, 51,  96, 156, 172, 24,
                           70,  134, 176, 168, 85, 236, 71,  180,
                           103, 187, 185, 153, 73, 207, 207, 84}};

  V<int> dataSizes = {14};

  rep0(i, sz(blocks)) {
    DOCTEST_INFO(format("Block {}", i + 1));
    int res = decodeBytes(blocks[i], sz(blocks[i]) - dataSizes[i]);
    CHECK(res == -1);
  }
}

TEST_CASE("jsQR test 96 - location 1 mirrored") {
  V<V<uint8_t>> blocks = {{133, 228, 78,  113, 85, 135, 202, 115,
                           180, 125, 228, 51,  96, 156, 172, 24,
                           70,  134, 176, 168, 85, 236, 71,  180,
                           103, 187, 185, 153, 73, 207, 207, 84}};

  V<int> dataSizes = {14};

  rep0(i, sz(blocks)) {
    DOCTEST_INFO(format("Block {}", i + 1));
    int res = decodeBytes(blocks[i], sz(blocks[i]) - dataSizes[i]);
    CHECK(res == -1);
  }
}

TEST_CASE("jsQR test 96 - location 2") {
  V<V<uint8_t>> blocks = {
      {68, 105, 92,  146, 6,   246, 102, 102, 150, 54, 82,
       6,  134, 247, 118, 209, 58,  56,  49,  21,  20, 81,
       41, 48,  75,  89,  151, 20,  52,  138, 227, 135},
      {87,  144, 58,  151, 54,  150, 118, 231, 87, 0,   208,
       166, 135, 71,  52,  2,   53,  3,   59,  99, 254, 3,
       92,  114, 187, 252, 125, 33,  95,  168, 55, 19},
      {135, 42,  168, 210, 247, 119, 119, 114, 230, 54,  247,
       39,  2,   230, 246, 226, 45,  13,  18,  170, 129, 229,
       32,  143, 215, 9,   109, 225, 146, 23,  179, 253, 139},
      {10, 246, 118, 198, 82,  230, 54,  246, 210, 247, 55,
       6,  23,  167, 38,  139, 238, 186, 74,  180, 87,  4,
       98, 98,  121, 21,  180, 202, 135, 135, 113, 196, 7},
      {117, 114, 247, 86,  149, 246, 246, 102, 102, 150, 54,
       117, 246, 134, 247, 26,  87,  30,  80,  223, 77,  58,
       52,  61,  165, 143, 251, 127, 3,   100, 87,  174, 50},
      {211, 103, 50,  250, 0,   208, 160, 236, 17,  236, 17,
       236, 17,  237, 17,  146, 238, 77,  128, 238, 4,   79,
       158, 148, 174, 131, 177, 180, 9,   109, 115, 210, 33},
  };
  V<int> dataSizes = {14, 14, 15, 15, 15, 15};

  V<V<uint8_t>> expected = {
      {68, 229, 84,  146, 6,   246, 102, 102, 150, 54, 82,
       6,  134, 247, 118, 208, 58,  48,  49,  17,  20, 89,
       41, 48,  75,  216, 151, 20,  52,  138, 227, 135},
      {87,  39,  50,  7,   54,  150, 118, 231, 87,  0,   208,
       166, 135, 71,  52,  2,   49,  67,  59,  227, 252, 19,
       92,  114, 187, 252, 125, 33,  95,  168, 55,  19},
      {71, 3,   162, 242, 247, 119, 119, 114, 230, 54,  247,
       39, 2,   230, 118, 226, 45,  141, 18,  170, 129, 229,
       32, 175, 215, 9,   109, 225, 146, 23,  179, 253, 139},
      {246, 246, 118, 198, 82,  230, 54,  246, 210, 247, 55,
       6,   23,  39,  38,  139, 238, 186, 74,  180, 87,  0,
       98,  34,  121, 21,  180, 202, 135, 135, 113, 196, 87},
      {247, 114, 247, 86,  149, 246, 246, 102, 102, 150, 54,
       85,  246, 134, 247, 26,  87,  30,  112, 207, 77,  59,
       52,  61,  165, 141, 251, 127, 3,   100, 87,  174, 98},
      {87,  39,  50,  242, 0,   208, 160, 236, 17,  236, 17,
       236, 17,  236, 17,  146, 238, 77,  128, 238, 4,   79,
       158, 150, 174, 131, 177, 180, 9,   109, 115, 210, 49}};

  rep0(i, sz(blocks)) {
    DOCTEST_INFO(format("Block {}", i + 1));
    int res = decodeBytes(blocks[i], sz(blocks[i]) - dataSizes[i]);
    REQUIRE(res != -1);
    CHECK(sz(blocks[i]) == sz(expected[i]));
    rep0(j, sz(blocks[i])) {
      DOCTEST_INFO(format("Block {}, byte {}", i + 1, j));
      CHECK(blocks[i][j] == expected[i][j]);
    }
  }
}

TEST_CASE("jsQR test 174") {
  V<V<uint8_t>> blocks = {
      {66,  194, 172, 61,  235, 189, 235, 45,  213, 21,  34,  162, 2,   2,  2,
       113, 47,  21,  135, 223, 239, 67,  117, 230, 146, 247, 237, 251, 80, 190,
       153, 251, 238, 170, 196, 125, 126, 84,  253, 249, 126, 172, 243},
      {0,   208, 166, 135, 71,  71,  3,   162, 242, 246, 66,  215, 23, 34,  230,
       63,  213, 209, 9,   87,  225, 149, 53,  63,  151, 102, 42,  41, 180, 243,
       246, 95,  14,  49,  143, 53,  70,  2,   222, 223, 126, 227, 133},
      {230, 87,  66,  246, 87,  130, 242, 2,   2,   2,   2,   2,   2,  2,  2,
       76,  126, 26,  84,  244, 204, 84,  231, 101, 236, 106, 130, 87, 17, 7,
       90,  123, 168, 140, 105, 223, 17,  110, 4,   11,  152, 112, 219},
      {0,   236, 17,  236, 17,  236, 17, 236, 17,  236, 17,  236, 17, 236, 17,
       153, 240, 126, 68,  133, 86,  83, 255, 31,  61,  138, 202, 85, 198, 168,
       207, 212, 10,  234, 58,  227, 44, 55,  215, 158, 205, 22,  217}};

  V<int> dataSizes = {15, 15, 15, 15};

  V<V<uint8_t>> expected = {
      {66,  194, 172, 61, 235, 189, 235, 45,  213, 21,  34,  162, 2,   2,   2,
       113, 40,  21,  47, 223, 239, 80,  117, 93,  146, 247, 30,  251, 136, 190,
       153, 147, 238, 12, 196, 125, 126, 84,  253, 249, 126, 172, 243},
      {0,   208, 166, 135, 71,  71,  3,   162, 242, 246, 66,  215, 23, 34, 230,
       63,  191, 209, 201, 87,  225, 179, 53,  49,  151, 102, 23,  41, 12, 243,
       246, 149, 14,  49,  143, 53,  70,  2,   222, 223, 126, 227, 133},
      {230, 87,  66,  246, 87,  130, 242, 2,   2,   2,   2,   2,   2,  2,  2,
       76,  214, 24,  84,  244, 204, 10,  186, 101, 236, 106, 125, 68, 17, 7,
       90,  59,  168, 140, 105, 223, 17,  110, 4,   11,  152, 112, 219},
      {0,   236, 17, 236, 17,  236, 17,  236, 17,  236, 17,  236, 17,  236, 17,
       153, 112, 78, 68,  133, 86,  123, 89,  31,  61,  155, 202, 146, 198, 168,
       207, 212, 24, 234, 58,  227, 44,  55,  215, 158, 205, 22,  217}};

  rep0(i, sz(blocks)) {
    DOCTEST_INFO(format("Block {}", i + 1));
    int res = decodeBytes(blocks[i], sz(blocks[i]) - dataSizes[i]);
    REQUIRE(res != -1);
    CHECK(sz(blocks[i]) == sz(expected[i]));
    rep0(j, sz(blocks[i])) {
      DOCTEST_INFO(format("Block {}, byte {}", i + 1, j));
      CHECK(blocks[i][j] == expected[i][j]);
    }
  }
}

TEST_CASE("jsQR test 168") {
  V<V<uint8_t>> blocks = {
      {65, 182, 135, 71,  71,  3,   162, 228, 246, 38, 38,
       84, 45,  139, 44,  249, 69,  231, 95,  125, 4,  207,
       59, 116, 103, 220, 68,  205, 250, 65,  115, 48, 130},
      {50,  230, 54,  242, 231, 205, 178, 13, 7,   20,  246,
       78,  1,   194, 170, 231, 94,  237, 86, 61,  141, 92,
       133, 150, 140, 36,  102, 25,  165, 41, 179, 85,  49},
      {119, 38,  22,  214, 214, 200, 48,  84,  17,  147, 17, 236,
       223, 156, 118, 197, 29,  102, 218, 72,  177, 215, 30, 106,
       101, 20,  139, 154, 231, 29,  136, 102, 199, 59},
      {17,  236, 17,  236, 17,  172, 17,  236, 17, 108, 17,  236,
       23,  115, 4,   245, 202, 66,  245, 235, 85, 88,  174, 114,
       229, 108, 118, 209, 44,  232, 213, 243, 27, 215}};
  V<int> dataSizes = {11, 11, 12, 12};

  V<V<uint8_t>> expected = {
      {65, 182, 135, 71,  71,  3,   162, 242, 246, 38, 38,
       72, 45,  139, 44,  249, 125, 231, 7,   125, 30, 207,
       59, 116, 103, 196, 68,  53,  250, 121, 115, 48, 130},
      {50,  230, 54,  242, 231, 86,  178, 247, 7,   38,  246,
       164, 1,   152, 170, 231, 94,  237, 22,  61,  118, 92,
       139, 150, 140, 36,  102, 121, 165, 41,  179, 85,  49},
      {119, 38,  22,  214, 214, 87,  48,  236, 17,  236, 17, 236,
       79,  156, 32,  197, 19,  102, 218, 72,  177, 255, 30, 194,
       101, 29,  139, 154, 231, 19,  136, 102, 199, 59},
      {17,  236, 17,  236, 17,  236, 17,  236, 17, 236, 17,  236,
       23,  115, 68,  245, 125, 66,  203, 235, 85, 88,  174, 178,
       229, 181, 118, 148, 44,  175, 213, 243, 27, 215}};

  rep0(i, sz(blocks)) {
    DOCTEST_INFO(format("Block {}", i + 1));
    int res = decodeBytes(blocks[i], sz(blocks[i]) - dataSizes[i]);
    REQUIRE(res != -1);
    CHECK(sz(blocks[i]) == sz(expected[i]));
    rep0(j, sz(blocks[i])) {
      DOCTEST_INFO(format("Block {}, byte {}", i + 1, j));
      CHECK(blocks[i][j] == expected[i][j]);
    }
  }
}
